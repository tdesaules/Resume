name: Integration $(Date:yyyyMMdd)$(Rev:.rr)

trigger: none
pr:
  autoCancel: false
  branches:
    include: [ master ]
  drafts: false

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: test
    displayName: Unit Tests
    dependsOn: []
    jobs:
      - job: test
        displayName: Run unit tests and lint
        timeoutInMinutes: 5
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: Checkout repository
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: Setup node and npm
          - script: |
              npm install
              npm run test
            displayName: Run unit tests
          - script: |
              sed -i "s/\/home\/runner\/work\/resume\/resume\///g" coverage/tests-report.xml
            displayName: Change path in test report
          - script: |
              npx eslint "src/**/*.{js,vue}" --format stylish
              npx eslint "src/**/*.{js,vue}" --format json --output-file coverage/eslint.json
            displayName: ESLint scan
          - script: |
              npm config set registry https://pkgs.dev.azure.com/tdesaules/resume/_packaging/packages/npm/registry/
              npm view @tdesaules/resume
              CURRENT_VERSION=$(npm view @tdesaules/resume | grep latest | sed 's/\x1b\[[0-9;]*m//g' | sed 's/.*\([[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*/\1/g')
              NEXT_VERSION=$(grep '"version":' package.json | grep '"version":' package.json | sed 's/.*\([[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*/\1/g')
              tools/compare --current_version $CURRENT_VERSION --next_version $NEXT_VERSION
            displayName: Check if version correct
          - publish: $(System.DefaultWorkingDirectory)/coverage
            artifact: coverage
            displayName: Publish coverage artifact
  - stage: 
    displayName: Code Quality
    dependsOn: [ test ]
    variables:
      - group: resume
      - commit: null
    jobs:
      - job: Codacy
        displayName: Run unit tests and lint
        timeoutInMinutes: 10
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: Checkout repository
          - download: current
            artifact: coverage
            displayName: Download artifact
          - script: |
              ##vso[task.setvariable variable=commit]git show --oneline | cut -d ' ' -f 3
              echo ${{ variables.commit }}
              echo $(commit)
            displayName: Get initial commit value
          - script: |
              curl -L https://github.com/codacy/codacy-analysis-cli/archive/master.tar.gz | tar xvz
              cd codacy-analysis-cli-* && sudo make install
            displayName: Download and install Codacy
          - script: |
              codacy-analysis-cli analyze --commit-uuid $(Build.SourceVersion) --directory $(System.DefaultWorkingDirectory) --username $CODACY_USER --project $CODACY_PROJECT --api-token $CODACY_TOKEN --allow-network --verbose --upload
            displayName: Codacy analysis
            env:
              CODACY_USER: $(CODACY_USER)
              CODACY_PROJECT: $(CODACY_PROJECT)
              CODACY_TOKEN: $(CODACY_CLI_TOKEN)
          - script: |
              echo $(Build.SourceVersion)
              bash <(curl -Ls https://coverage.codacy.com/get.sh) report --commit-uuid $(Build.SourceVersion) --coverage-reports $(Pipeline.Workspace)/coverage/lcov.info --partial
              bash <(curl -Ls https://coverage.codacy.com/get.sh) report --commit-uuid $(Build.SourceVersion) --coverage-reports $(Pipeline.Workspace)/coverage/cobertura-coverage.xml --partial
              bash <(curl -Ls https://coverage.codacy.com/get.sh) final --commit-uuid $(Build.SourceVersion)
            displayName: Codacy coverage
            env:
              CODACY_PROJECT_TOKEN: $(CODACY_COVERAGE_TOKEN)
  - stage: security
    displayName: Security
    dependsOn: [ test ]
    variables:
      - group: resume
    jobs:
      - job: snyk
        displayName: Snyk
        timeoutInMinutes: 5
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: Checkout repository
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: Setup node and npm
          - script: | 
              npm install --global snyk
              snyk auth $SNYK_TOKEN
              snyk monitor --fail-on=patchable --project-name=@azure-pipeline/resume
              snyk test --fail-on=patchable --project-name=@azure-pipeline/resume
            displayName: Install Snyk and analyze
            env:
              SNYK_TOKEN: $(SNYK_TOKEN)