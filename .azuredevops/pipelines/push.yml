name: push $(Date:yyyyMMdd)$(Rev:.rr)

trigger:
  branches:
    include: ['*']
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: resume

stages:
  - stage: prod
    displayName: Prod
    dependsOn: []
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: build
        displayName: Build
        timeoutInMinutes: 5
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: checkout repository
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: setup node and npm
          - script: |
              npm install
              npm run build:prod
            displayName: build with npm for prod
          - script: |
              grep '"version":' package.json | grep '"version":' package.json | sed 's/.*\([[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*/\1/g' > VERSION.md
            displayName: create VERSION.md
          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: dist
            displayName: publish dist
          - publish: $(System.DefaultWorkingDirectory)/package.json
            artifact: package
            displayName: publish package.json
          - publish: $(System.DefaultWorkingDirectory)/VERSION.md
            artifact: version
            displayName: publish version
  - stage: dev
    displayName: Dev
    dependsOn: []
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    jobs:
      - job: build
        displayName: Build
        timeoutInMinutes: 5  
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: checkout repository
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: setup node and npm
          - script: |
              npm install
              npm run build:dev
            displayName: build with npm for dev
          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: dist
            displayName: publish dist
  - stage: security
    displayName: Security
    dependsOn: [prod]
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: snyk
        displayName: Snyk
        timeoutInMinutes: 5
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: checkout repository
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: setup node and npm
          - script: | 
              npm install --global snyk
              snyk auth $SNYK_TOKEN
              snyk monitor --fail-on=patchable --project-name=@azure-pipeline/resume
              snyk test --fail-on=patchable --project-name=@azure-pipeline/resume
            displayName: install and run snyk
            env:
              SNYK_TOKEN: $(SNYK_TOKEN)
      - job: deepcode
        displayName: DeepCode
        timeoutInMinutes: 5
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: checkout repository
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8' 
              addToPath: true 
          - script: |
              python -m pip install deepcode
              deepcode analyze --path $(System.DefaultWorkingDirectory) --with-linters
            displayName: install and run deepcode
            env:
              DEEPCODE_API_KEY: $(DEEPCODE_TOKEN)
  - stage: quality
    displayName: Quality
    dependsOn: [prod]
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: sonarcloud
        displayName: SonarCloud
        timeoutInMinutes: 5
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: checkout repository
          - script: |
              sed -i "s/sonar.projectKey=need-to-be-replaced/sonar.projectKey=$SONAR_PROJECT_KEY/g" sonar-project.properties
              sed -i "s/sonar.organization=need-to-be-replaced/sonar.organization=$SONAR_PROJECT_ORG/g" sonar-project.properties
              NEXT_VERSION=$(grep '"version":' package.json | grep '"version":' package.json | sed 's/.*\([[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*/\1/g')
              sed -i "s/sonar.projectVersion=need-to-be-replaced/sonar.projectVersion=$NEXT_VERSION/g" sonar-project.properties
              sed -i "s/sonar.branch.name=need-to-be-replaced/sonar.branch.name=master/g" sonar-project.properties
              sed -i "s/sonar.branch.target/#sonar.branch.target/g" sonar-project.properties
              sed -i "s/sonar.eslint.reportPaths/#sonar.eslint.reportPaths/g" sonar-project.properties
              sed -i "s/sonar.javascript.lcov.reportPaths/#sonar.javascript.lcov.reportPaths/g" sonar-project.properties
              sed -i "s/sonar.testExecutionReportPaths/#sonar.testExecutionReportPaths/g" sonar-project.properties
            displayName: configure sonar scanner
            env:
              SONAR_PROJECT_KEY: $(SONAR_PROJECT_KEY)
              SONAR_PROJECT_ORG: $(SONAR_PROJECT_ORG)
          - script: |
              curl --create-dirs -sSLo $(Pipeline.Workspace)/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
              unzip -o $(Pipeline.Workspace)/.sonar/sonar-scanner.zip -d $(Pipeline.Workspace)/.sonar/
              $(Pipeline.Workspace)/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux/bin/sonar-scanner -Dsonar.host.url=https://sonarcloud.io/
            displayName: run sonar-scanner
            env:
              SONAR_SCANNER_VERSION: 4.5.0.2216
  - stage: deploy
    displayName: Deploy
    dependsOn: [dev]
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    jobs:
      - job: netlify
        displayName: Netlify
        timeoutInMinutes: 5
        steps:
          - checkout: none
          - download: current
            artifact: dist
            displayName: download dist
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: setup node and npm
          - script: |
              npm install --global netlify-cli
              netlify deploy --auth $NETLIFY_AUTH_TOKEN --site $NETLIFY_SITE_ID --dir $(Pipeline.Workspace)/dist --prod
            displayName: install netlify cli and deploy
            env:
              NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)
              NETLIFY_SITE_ID: $(NETLIFY_SITE_ID_DEV)
  - stage: publish
    displayName: Publish
    dependsOn: 
      - security
      - quality
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: npm
        displayName: Npm
        timeoutInMinutes: 5
        steps:
          - checkout: none
          - download: current
            artifact: dist
            displayName: download dist artifact
          - download: current
            artifact: package
            displayName: download package.json artifact
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: setup node and npm
          - script: |
              mv $(Pipeline.Workspace)/package/package.json $(Pipeline.Workspace)/package.json
              rm -rf $(Pipeline.Workspace)/package
            displayName: mv package.json
          - task: Npm@1
            inputs:
              command: publish
              publishRegistry: useFeed
              publishFeed: resume/packages
              workingDir: $(Pipeline.Workspace)
            displayName: publish package to azure artifacts
      - job: release
        displayName: Release
        timeoutInMinutes: 5
        dependsOn: [npm]
        variables:
          - name: version
            value: null
        steps:
          - checkout: none
          - download: current
            artifact: version
            displayName: download version artifact
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: setup node and npm
          - script: |
              VERSION=$(cat "$(Pipeline.Workspace)/version/VERSION.md")
              echo "##vso[task.setvariable variable=version]$VERSION"
            displayName: add version variable
          - script: |
              npm config set registry https://pkgs.dev.azure.com/tdesaules/resume/_packaging/packages/npm/registry/
              npm install @tdesaules/resume@$(version) --prefix $(System.DefaultWorkingDirectory)
            displayName: download @tdesaules/resume package
          - script: |
              cd $(System.DefaultWorkingDirectory)/node_modules/@tdesaules/resume/dist/
              tar -cvzf $(System.DefaultWorkingDirectory)/dist.tar.gz *
            displayName: create dist archive
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: github.com_tdesaules
              repositoryName: tdesaules/resume
              action: create
              tagSource: manual
              tag: azuredevops_$(version)
              title: AzureDevops/$(version)
              assets: $(System.DefaultWorkingDirectory)/dist.tar.gz
            displayName: create github release